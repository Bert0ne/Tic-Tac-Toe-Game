{"mappings":"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","sources":["src/board.js","src/easymode.js","src/winningConditions.js","src/hardmode.js","src/js.js"],"sourcesContent":["export class Board {\n    fieldsElements = document.querySelectorAll('.board__item');\n    panel = document.querySelector('.panel');\n    button = document.querySelector('.reset-button');\n    modeSelect = document.querySelector('#mode-select');\n    currentPlayerTag = document.getElementById('current-player')\n    winLine = document.querySelector('.winLine');\n\n    constructor(onItemClick, onButtonClick, onModeChange, hoverItemOn, hoverItemOff) {\n        this.onButtonClick = onButtonClick;\n        this.button.addEventListener('click', this.handleButtonClick);\n\n        this.fieldsElements.forEach(field => {\n            field.addEventListener('click', onItemClick)\n        });\n\n        this.modeSelect.addEventListener('change', onModeChange);\n\n        this.fieldsElements.forEach(el => {\n            el.addEventListener('mouseover', hoverItemOn)\n        });\n\n        this.fieldsElements.forEach(el => {\n            el.addEventListener('mouseleave', hoverItemOff)\n        })\n    };\n\n    setCurrentPlayer = (player) => {\n            this.currentPlayerTag.innerText = `Player ${player} move`;\n    };\n    clearCurrentPlayerBoard = () => {\n        this.currentPlayerTag.innerText = ' ';\n    }\n\n    handleButtonClick = () => {\n        this.resetBoard();\n        this.onButtonClick(); \n    };\n\n    resetBoard = () => {\n        this.resetBoardClasses();\n        this.clearMessage();\n        this.setCurrentPlayer('X')\n    }\n\n    resetBoardClasses = () => {\n        this.fieldsElements.forEach(field => {\n            field.classList.remove('board__item--filled-X', 'board__item--filled-O')\n        })\n    };\n\n    getFieldForPosition = (position) => {\n        return this.fieldsElements[position];\n    } \n\n    renderWinLine = (gameWon, option = 0) => {\n\n        let prop = {\n                0: [0,30,50],\n                1: [0, 100, 50],\n                2: [0, 170, 50],\n                3: [90, 100, 15],\n                4: [90, 100, 50],\n                5: [90, 100, 85],\n                6: [45, 100, 50],\n                7: [-45, 100, 50],\n            }\n\n            this.winLine.style.setProperty('display', `${gameWon ? 'block' : 'none'}`);\n            \n            this.winLine.style.setProperty('transform', `rotate(${prop[`${option}`][0]}deg)`);\n            this.winLine.style.setProperty('top', `calc(${prop[`${option}`][1]}% / 2)`);\n            this.winLine.style.setProperty('left', `calc(${prop[`${option}`][2]}% - (420px / 2))`);\n \n    }\n\n    displayWinMessage = activePlayer => {\n        this.panel.innerHTML = `Player ${activePlayer} Win`\n    };\n    \n    displayTieMessage = () => {\n        this.panel.innerHTML = 'Draw';\n    };\n    \n    clearMessage = () => {\n        this.panel.innerHTML = ' ';\n    };\n}\n","export class EasyMode {\n    getMove = (fields, player) => {\n        \n        let freeNumb = Object.entries(fields).filter(el => el[1] == ' ').map(el => el[0])\n\n        const randomPositionIndex = Math.floor(Math.random() * freeNumb.length);\n\n        return freeNumb[randomPositionIndex]\n    }\n}","\n\nexport const winningConditions = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [6,4,2]\n];","import { winningConditions } from \"./winningConditions\";\nexport class HardMode {\n    getMove = (fields, player) => {\n\n        for(let i = 0; i<= winningConditions.length -1; i++) {\n            const [posA, posB, posC] = winningConditions[i];\n            const value1 = fields[posA];\n            const value2 = fields[posB];\n            const value3 = fields[posC];\n    \n\n            if(value1 === value2 && value1 !== ' ' && value3 === ' ') {\n                return posC;\n            }\n\n            if(value1 === value3 && value1 !== ' ' && value2 === ' ') {\n                return posB;\n            }\n\n            if(value2 === value3 && value2 !== ' ' && value1 === ' ') {\n                return posA;\n            }\n        } \n\n        \n        let freeNumb = Object.entries(fields).filter(el => el[1] == ' ').map(el => el[0])\n        const randomPositionIndex = Math.floor(Math.random() * freeNumb.length);\n\n        return freeNumb[randomPositionIndex]\n    }\n}","import { Board } from './board'\nimport  { EasyMode }  from './easymode'\nimport  { HardMode }  from './hardmode'\nimport { winningConditions } from './winningConditions'\nclass Game {\n    fields;\n    activePlayer;\n    gameActive;\n    doesAIMoveFirst = false;\n    currentMode = null; // null - pvp\n\n    constructor() {\n        this.board = new Board(this.handleItemClick, this.handleReset, this.handleModeChange, this.hoverItemOn, this.hoverItemOff);\n        this.board.handleButtonClick()\n    }\n\n    validateGame = () => {\n        let gameWon = false;\n    \n        for(let i = 0; i<= winningConditions.length -1; i++) {\n            const [posA, posB, posC] = winningConditions[i];\n            const value1 = this.fields[posA];\n            const value2 = this.fields[posB];\n            const value3 = this.fields[posC];\n    \n            if(value1 != ' ' && value1 === value2 && value1 === value3) {\n                gameWon = true;\n                this.board.renderWinLine(gameWon, i)\n                break;\n            } \n        }\n        if(gameWon) {\n            this.gameActive = false;\n            this.board.displayWinMessage(this.activePlayer) \n\n        } else if (this.isBoardFull()) {\n            this.gameActive = false;\n            this.board.displayTieMessage()\n        }    \n    }\n    \n    isBoardFull = () => {\n        return this.fields.every(field => field !== ' ')\n    };\n\n    handleModeChange = (e) => {\n        this.currentMode = this.getModeClassForName(e.target.value);\n        this.setDefaults(false);\n        this.board.resetBoard()\n    }\n\n    getModeClassForName = (name) => {\n        if(name === \"easy\") return new EasyMode();\n        if(name === \"hard\") return new HardMode();\n        return null;\n\n    }\n\n    handleReset = () => {\n        this.setDefaults(!this.doesAIMoveFirst);\n        this.AIsFirstMove();\n    };\n\n    AIsFirstMove = () => {\n        if(this.doesAIMoveFirst && this.currentMode !== null) {\n            this.makeMove(this.currentMode.getMove(this.fields, this.activePlayer));\n        }\n    }\n\n    handleItemClick = (e) => {\n        const {pos} = e.target.dataset;\n        \n        if(this.gameActive && this.fields[pos] === ' ') {\n            this.makeMove(pos)\n\n            if(this.gameActive && this.currentMode !== null) {\n                setTimeout(() => {\n                    this.makeMove(this.currentMode.getMove(this.fields, this.activePlayer));\n                }, 1000);\n            }\n        }\n    } \n\n    hoverItemOn = (e) => {\n        const pos = e.target\n        if(pos.classList.contains('board__item--filled-X') || pos.classList.contains(`board__item--filled-O`)) {\n            return \n        } else {\n            pos.classList.add(`board__item--filled-${this.activePlayer}--H`)\n        }\n    }\n    hoverItemOff = (e) => {\n        const pos = e.target\n        pos.classList.remove(`board__item--filled-X--H`);\n        pos.classList.remove(`board__item--filled-O--H`);\n\n    }\n\n    makeMove = position => {\n        this.fields[position] = this.activePlayer;\n\n        this.board.getFieldForPosition(position).classList.add(`board__item--filled-${this.activePlayer}`);\n        this.board.getFieldForPosition(position).classList.remove(`board__item--filled-${this.activePlayer}--H`);\n\n        this.validateGame();\n        this.activePlayer = this.activePlayer === 'X' ? 'O' : 'X';\n        \n        if(this.isBoardFull()) {\n            this.board.clearCurrentPlayerBoard()\n        } \n        if(!this.gameActive) {\n            this.board.clearCurrentPlayerBoard()\n        }\n        if(this.gameActive) {\n            this.board.setCurrentPlayer(this.activePlayer);     \n        }\n    }\n\n    setDefaults = (doesAIMoveFirst) => {\n        this.fields = Array.from(' '.repeat(9));\n        this.activePlayer = 'X';\n        this.gameActive = true;\n        this.doesAIMoveFirst = doesAIMoveFirst !== undefined ? doesAIMoveFirst : false;\n        this.board.renderWinLine(false);\n    };\n}\n\n\n\nlet game = new Game()"],"names":["$2db5d2d93a65e8cd$export$dc537a3a3893548e","fieldsElements","document","querySelectorAll","panel","querySelector","button","modeSelect","currentPlayerTag","getElementById","winLine","constructor","onItemClick","onButtonClick","onModeChange","hoverItemOn","hoverItemOff","this","addEventListener","handleButtonClick","forEach","field","el","setCurrentPlayer","player","innerText","clearCurrentPlayerBoard","resetBoard","resetBoardClasses","clearMessage","classList","remove","getFieldForPosition","position","renderWinLine","gameWon","option","prop","style","setProperty","displayWinMessage","activePlayer","innerHTML","displayTieMessage","$a13bfba26bbf4642$export$d064fd57705a58f","getMove","fields","freeNumb","Object","entries","filter","map","Math","floor","random","length","$cfbc939fe2edd22e$export$81a20a64dca3a135","$473311300805331b$export$39a5c4f7881828ab","i","posA","posB","posC","value1","value2","value3","gameActive","doesAIMoveFirst","currentMode","board","handleItemClick","handleReset","handleModeChange","validateGame","isBoardFull","every","e","getModeClassForName","target","value","setDefaults","name","AIsFirstMove","makeMove","pos","dataset","setTimeout","contains","add","Array","from","repeat","undefined"],"version":3,"file":"index.d3893527.js.map"}